// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © sammie123567858


//@version=5
indicator("Kernel Macd", overlay = false)
import jdehorty/KernelFunctions/2 as kernels

// general
width = input(2, 'Line Width', group = 'General')
showFast = input.bool(true, 'Show Fast Kernel', group = 'General')
showSlow = input.bool(true, 'Show Slow Kernel', group = 'General')

//fast Kernel line inputs
float kernelFastWeight = input.float(8, "Rel Weight", 0 , 50, step = 0.2, group = "Fast AO Kernel Settings")
int kernelFastLookback = input.int(12, "Lookback",2 , 500, group = "Fast AO Kernel Settings")
int kernelFastRegressionStart = input.int(25, "Regression Start",2 , 400, group = "Fast AO Kernel Settings")
bool kernelFastSmooth = input.bool(true, "Smooth Line", inline = "Smooth", group = "Fast AO Kernel Settings")
int kernelFastSmoothPeriod = input.int(4, "",2 , 200, inline = "Smooth", group = "Fast AO Kernel Settings")

//slow Kernel line inputs
float kernelSlowWeight = input.float(3, "Rel Weight", 0 , 5, step = 0.2, group = "Slow AO Kernel Settings")
int kernelSlowLookback = input.int(26, "Lookback",2 , 500, group = "Slow AO Kernel Settings")
int kernelSlowRegressionStart = input.int(120, "Regression Start",2 , 400, group = "Slow AO Kernel Settings")
bool kernelSlowSmooth = input.bool(true, "Smooth Line", inline = "Smooth", group = "Slow AO Kernel Settings")
int kernelSlowSmoothPeriod = input.int(40, "",2 , 200, inline = "Smooth", group = "Slow AO Kernel Settings")


// Plot colors
col_grow_above = input(#26A69A, "Above   Grow", group="Histogram", inline="Above")
col_fall_above = input(#B2DFDB, "Fall", group="Histogram", inline="Above")
col_grow_below = input(#FFCDD2, "Below Grow", group="Histogram", inline="Below")
col_fall_below = input(#FF5252, "Fall", group="Histogram", inline="Below")








// kernel ao oscillator indicator
float kernelFast = 0
float kernelSlow = 0
color kernelFastColor = color(na)
color kernelSlowColor = color(na)

kernelFast := kernels.rationalQuadratic(close, kernelFastLookback, kernelFastWeight, kernelFastRegressionStart)
if kernelFastSmooth
    kernelFast := ta.sma(kernelFast, kernelFastSmoothPeriod)
kernelFastRising = ta.rising(kernelFast, 1)
kernelFastColor := kernelFastRising ? #5d0995 : #cf0f49

kernelSlow := kernels.rationalQuadratic(close, kernelSlowLookback, kernelSlowWeight, kernelSlowRegressionStart)
if kernelSlowSmooth
    kernelSlow := ta.sma(kernelSlow, kernelSlowSmoothPeriod)
kernelSlowRising = ta.rising(kernelSlow, 1)
kernelSlowColor := kernelSlowRising ? #5d0995 : #cf0f49
//


// Calculating
hist = kernelFast - kernelSlow
hline(0, "Zero Line", color=color.new(#787B86, 50))
plot(hist, title="Histogram", style=plot.style_columns, color=(hist>=0 ? (hist[1] < hist ? col_grow_above : col_fall_above) : (hist[1] < hist ? col_grow_below : col_fall_below)))


kernelFast := kernels.rationalQuadratic(hist, kernelFastLookback, kernelFastWeight, kernelFastRegressionStart)
kernelSlow := kernels.rationalQuadratic(hist, kernelSlowLookback, kernelSlowWeight, kernelSlowRegressionStart)
plot(showFast ? kernelFast:na, title="Fast Kernel", color=kernelFastColor, linewidth = width)
plot(showSlow ? kernelSlow:na, title="Slow Kernel", color=kernelSlowColor, linewidth = width)
