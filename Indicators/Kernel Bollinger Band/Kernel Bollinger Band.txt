// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© sammie123567858

//@version=5
indicator("Kernel Bollinger Band", overlay = true, shorttitle = 'Kernel BB')

import jdehorty/KernelFunctions/2 as kernels

//user Input for the fast Kernel line
string kernelFastType = input.string("Rational Quadratic", "Kernel Type", options = ["Rational Quadratic", "Gaussian"], group = "Kernel Line Settings" )
float kernelFastWeight = input.float(8, "Rel Weight", 0 , 50, step = 0.2, group = "Kernel Line Settings")
int kernelFastLookback = input.int(20, "Lookback",2 , 500, group = "Kernel Line Settings")
int kernelFastRegressionStart = input.int(25, "Regression Start",2 , 400, group = "Kernel Line Settings")
bool kernelFastSmooth = input.bool(true, "Smooth Line", inline = "Smooth", group = "Kernel Line Settings")
int kernelFastSmoothPeriod = input.int(4, "",2 , 200, inline = "Smooth", group = "Kernel Line Settings")



//Calculation
float kernelFast = switch kernelFastType
    "Rational Quadratic" => kernels.rationalQuadratic(close, kernelFastLookback, kernelFastWeight, kernelFastRegressionStart)
    "Gaussian" => kernels.gaussian(close, kernelFastLookback, kernelFastRegressionStart)

if kernelFastSmooth
    kernelFast := ta.sma(kernelFast, kernelFastSmoothPeriod)
    
kernelFastRising = ta.rising(kernelFast, 1)
kernelFastColor = kernelFastRising ? #542772 : #df4774

length = input.int(20, minval=1, group='For Upper & Lower Bands')
src = input(close, title="Source", group='For Upper & Lower Bands')
mult = input.float(2.0, minval=0.001, maxval=50, title="StdDev", group='For Upper & Lower Bands')
basis = kernelFast
dev = mult * ta.stdev(src, length)



// Plotting
upper = basis + dev
lower = basis - dev
offset = input.int(0, "Offset", minval = -500, maxval = 500)
plot(basis, "Basis", color=kernelFastColor, offset = offset)
p1 = plot(upper, "Upper", color=#2962FF, offset = offset)
p2 = plot(lower, "Lower", color=#2962FF, offset = offset)
fill(p1, p2, title = "Background", color=color.rgb(33, 150, 243, 95))
